openapi: 3.0.1

info:
  title: Fooderama API
  description: Fooderama API specification
  version: 1.0.0

servers:
  - url: api/v1

# ALL API ENDPOINTS ARE DEFINED BELOW
paths:
  /restaurants:
    get:
      tags:
        - Restaurants

      parameters:
        - name: cuisines
          in: query
          description: If you want to include the cuisines in the fetched restaurants (default is false)
          required: false
          schema:
            type: boolean
            enum: [true, false]
            default: false

        - name: orderby
          in: query
          description: The field that you want to order the fetched results by. If sort is not mentioned, they will be ordered in ASC order
          required: false
          schema:
            type: string
            enum: ['restId', 'restName']

        - name: sort
          in: query
          description: If you want to order the fetched restaurants in ascending or descending order depending on the orderby query param. Has no effect if the orderby query param is not mentioned.
          required: false
          schema:
            type: string
            enum: ['asc', 'desc']

        - name: open
          in: query
          description: Filter the returned restaurants depending on if the restaurant has an open status or not. By default, it includes all of the restaurants regardless.
          required: false
          schema:
            type: boolean
            enum: [true, false]

      summary: Get all restaurants registered in the DB

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantsArrayResponse'

        500:
          description: INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'

    post:
      tags:
        - Restaurants

      summary: Register a new restaurant to the DB.
      description: Register a new restaurant. Auth will be required to check if user is an admin.

      requestBody:
        description: Restaurant that you want to create

        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/BaseRestaurant'
                - $ref: '#/components/schemas/BaseRestaurantArray'

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantResponse'

        400:
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'

        500:
          description: INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'

  /restaurants/{id}:
    put:
      tags:
        - Restaurants

      summary: Update a restaurant
      description: Update a restaurant that has already been registered. Auth will be required.

      parameters:
        - name: id
          in: path
          description: id of the restaurant that you want to update
          required: true
          schema:
            type: integer

      requestBody:
        description: Restaurant that you want to update with the fields that you want to update.

        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseRestaurant'

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantResponse'

        400:
          description: BAD REQUEST. Most commonly occurs if restaurant with id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'

        500:
          description: INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'

    get:
      tags:
        - Restaurants
      summary: Fetch a particular restaurant
      description: Fetch a particular restaurant based on the id. If it does not exist in the database, returns null.

      parameters:
        - name: id
          in: path
          description: id of the restaurant you want to fetch
          required: true
          schema:
            type: integer

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantResponse'

        500:
          description: INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'

    delete:
      tags:
        - Restaurants
      summary: Delete a particular restaurant
      description: Delete a particular restaurant based on the id. Required auth of the highest level.

      parameters:
        - name: id
          in: path
          description: id of the restaurant you want to delete
          required: true
          schema:
            type: integer

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object

                properties:
                  deletedRows:
                    type: integer

        500:
          description: INTERNAL SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'

# ALL COMPONENTS ARE DEFINED BELOW
components:
  schemas:
    BaseCuisine:
      type: object

      required:
        - cuisineName

      properties:
        cuisineName:
          type: string

    CuisineResponse:
      allOf:
        - $ref: '#/components/schemas/BaseCuisine'

        - type: object

          required:
            - restId
            - createdAt
            - updatedAt

          properties:
            restId:
              type: integer

            createdAt:
              type: string

            updatedAt:
              type: string

    BaseRestaurant:
      type: object

      required:
        - restName
        - restImage
        - description

      properties:
        restName:
          type: string
        restImage:
          type: string
        description:
          type: string
        open:
          type: boolean
        rating:
          type: number
        openingTime:
          type: string
        closingTime:
          type: string

        Cuisines:
          type: array
          items:
            $ref: '#/components/schemas/BaseCuisine'

    BaseRestaurantArray:
      type: array

      items:
        $ref: '#/components/schemas/BaseRestaurant'

    RestaurantResponse:
      allOf:
        - $ref: '#/components/schemas/BaseRestaurant'
        - type: object

          required:
            - restId
            - createdAt
            - updatedAt

          properties:
            restId:
              type: integer
            createdAt:
              type: string
            updatedAt:
              type: string

    RestaurantsArrayResponse:
      type: array

      items:
        $ref: '#/components/schemas/RestaurantResponse'

    GeneralError:
      type: object

      required:
        - name
        - message
        - code
        - className

      properties:
        name:
          type: string
        message:
          type: string
        code:
          type: integer
        className:
          type: string
        data:
          type: object
